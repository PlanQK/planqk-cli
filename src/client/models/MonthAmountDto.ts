/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform OpenAPI definition
 * OpenAPI definition for the Platform and Ecosystem for Quantum-assisted Artificial Intelligence Platform
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stoneone.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists} from '../runtime'
import type {AmountMajorDto} from './AmountMajorDto'
import {AmountMajorDtoFromJSON, AmountMajorDtoToJSON} from './AmountMajorDto'
import type {ProductGroupDto} from './ProductGroupDto'
import {ProductGroupDtoFromJSON, ProductGroupDtoToJSON} from './ProductGroupDto'

/**
 *
 * @export
 * @interface MonthAmountDto
 */
export interface MonthAmountDto {
  /**
   *
   * @type {number}
   * @memberof MonthAmountDto
   */
  year?: number;
  /**
   *
   * @type {number}
   * @memberof MonthAmountDto
   */
  month?: number;
  /**
   *
   * @type {AmountMajorDto}
   * @memberof MonthAmountDto
   */
  amountMajor?: AmountMajorDto;
  /**
   *
   * @type {Array<ProductGroupDto>}
   * @memberof MonthAmountDto
   */
  groups?: Array<ProductGroupDto>;
}

/**
 * Check if a given object implements the MonthAmountDto interface.
 */
export function instanceOfMonthAmountDto(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function MonthAmountDtoFromJSON(json: any): MonthAmountDto {
  return MonthAmountDtoFromJSONTyped(json, false)
}

export function MonthAmountDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MonthAmountDto {
  if ((json === undefined) || (json === null)) {
    return json
  }
  return {

    'year': !exists(json, 'year') ? undefined : json['year'],
    'month': !exists(json, 'month') ? undefined : json['month'],
    'amountMajor': !exists(json, 'amountMajor') ? undefined : AmountMajorDtoFromJSON(json['amountMajor']),
    'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(ProductGroupDtoFromJSON)),
  }
}

export function MonthAmountDtoToJSON(value?: MonthAmountDto | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {

    'year': value.year,
    'month': value.month,
    'amountMajor': AmountMajorDtoToJSON(value.amountMajor),
    'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(ProductGroupDtoToJSON)),
  }
}

