/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform API
 * Part of the OpenAPI specification for the PlanQK Platform.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@anaqor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists} from '../runtime'
import type {OwnerDto} from './OwnerDto'
import {OwnerDtoFromJSON, OwnerDtoToJSON} from './OwnerDto'
import type {ReviewDto} from './ReviewDto'
import {ReviewDtoFromJSON, ReviewDtoToJSON} from './ReviewDto'
import type {TaxonomyElement} from './TaxonomyElement'
import {TaxonomyElementFromJSON, TaxonomyElementToJSON} from './TaxonomyElement'

/**
 *
 * @export
 * @interface DataPoolDto
 */
export interface DataPoolDto {
    /**
     * The access permission role for this entity of the current user
     * @type {string}
     * @memberof DataPoolDto
     */
    readonly currentUserPermission?: DataPoolDtoCurrentUserPermissionEnum;
    /**
     *
     * @type {string}
     * @memberof DataPoolDto
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DataPoolDto
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof DataPoolDto
     */
    shortDescription?: string;
    /**
     *
     * @type {string}
     * @memberof DataPoolDto
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof DataPoolDto
     */
    metadata?: string;
    /**
     *
     * @type {string}
     * @memberof DataPoolDto
     */
    createdBy?: string;
    /**
     *
     * @type {Date}
     * @memberof DataPoolDto
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof DataPoolDto
     */
    modifiedBy?: string;
    /**
     *
     * @type {boolean}
     * @memberof DataPoolDto
     */
    labelled?: boolean;
    /**
     *
     * @type {Date}
     * @memberof DataPoolDto
     */
    modifiedAt?: Date;
    /**
     *
     * @type {string}
     * @memberof DataPoolDto
     */
    entityMaturity?: DataPoolDtoEntityMaturityEnum;
    /**
     *
     * @type {Set<TaxonomyElement>}
     * @memberof DataPoolDto
     */
    licenses?: Set<TaxonomyElement>;
    /**
     *
     * @type {Set<TaxonomyElement>}
     * @memberof DataPoolDto
     */
    formats?: Set<TaxonomyElement>;
    /**
     *
     * @type {Set<TaxonomyElement>}
     * @memberof DataPoolDto
     */
    problemTypes?: Set<TaxonomyElement>;
    /**
     *
     * @type {Set<TaxonomyElement>}
     * @memberof DataPoolDto
     */
    industries?: Set<TaxonomyElement>;
    /**
     *
     * @type {Set<ReviewDto>}
     * @memberof DataPoolDto
     */
    reviews?: Set<ReviewDto>;
    /**
     *
     * @type {Array<OwnerDto>}
     * @memberof DataPoolDto
     */
    owners?: Array<OwnerDto>;
    /**
     *
     * @type {boolean}
     * @memberof DataPoolDto
     */
    _public?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DataPoolDto
     */
    bookmarked?: boolean;
}


/**
 * @export
 */
export const DataPoolDtoCurrentUserPermissionEnum = {
    Viewer: 'VIEWER',
    Maintainer: 'MAINTAINER',
    Owner: 'OWNER'
} as const;
export type DataPoolDtoCurrentUserPermissionEnum = typeof DataPoolDtoCurrentUserPermissionEnum[keyof typeof DataPoolDtoCurrentUserPermissionEnum];

/**
 * @export
 */
export const DataPoolDtoEntityMaturityEnum = {
    Initial: 'INITIAL',
    UnderReview: 'UNDER_REVIEW',
    Approved: 'APPROVED'
} as const;
export type DataPoolDtoEntityMaturityEnum = typeof DataPoolDtoEntityMaturityEnum[keyof typeof DataPoolDtoEntityMaturityEnum];


/**
 * Check if a given object implements the DataPoolDto interface.
 */
export function instanceOfDataPoolDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function DataPoolDtoFromJSON(json: any): DataPoolDto {
    return DataPoolDtoFromJSONTyped(json, false);
}

export function DataPoolDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataPoolDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'currentUserPermission': !exists(json, 'currentUserPermission') ? undefined : json['currentUserPermission'],
        'id': json['id'],
        'name': json['name'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'modifiedBy': !exists(json, 'modifiedBy') ? undefined : json['modifiedBy'],
        'labelled': !exists(json, 'labelled') ? undefined : json['labelled'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'entityMaturity': !exists(json, 'entityMaturity') ? undefined : json['entityMaturity'],
        'licenses': !exists(json, 'licenses') ? undefined : (new Set((json['licenses'] as Array<any>).map(TaxonomyElementFromJSON))),
        'formats': !exists(json, 'formats') ? undefined : (new Set((json['formats'] as Array<any>).map(TaxonomyElementFromJSON))),
        'problemTypes': !exists(json, 'problemTypes') ? undefined : (new Set((json['problemTypes'] as Array<any>).map(TaxonomyElementFromJSON))),
        'industries': !exists(json, 'industries') ? undefined : (new Set((json['industries'] as Array<any>).map(TaxonomyElementFromJSON))),
        'reviews': !exists(json, 'reviews') ? undefined : (new Set((json['reviews'] as Array<any>).map(ReviewDtoFromJSON))),
        'owners': !exists(json, 'owners') ? undefined : ((json['owners'] as Array<any>).map(OwnerDtoFromJSON)),
        '_public': !exists(json, 'public') ? undefined : json['public'],
        'bookmarked': !exists(json, 'bookmarked') ? undefined : json['bookmarked'],
    };
}

export function DataPoolDtoToJSON(value?: DataPoolDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'name': value.name,
        'shortDescription': value.shortDescription,
        'description': value.description,
        'metadata': value.metadata,
        'createdBy': value.createdBy,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'modifiedBy': value.modifiedBy,
        'labelled': value.labelled,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
        'entityMaturity': value.entityMaturity,
        'licenses': value.licenses === undefined ? undefined : (Array.from(value.licenses as Set<any>).map(TaxonomyElementToJSON)),
        'formats': value.formats === undefined ? undefined : (Array.from(value.formats as Set<any>).map(TaxonomyElementToJSON)),
        'problemTypes': value.problemTypes === undefined ? undefined : (Array.from(value.problemTypes as Set<any>).map(TaxonomyElementToJSON)),
        'industries': value.industries === undefined ? undefined : (Array.from(value.industries as Set<any>).map(TaxonomyElementToJSON)),
        'reviews': value.reviews === undefined ? undefined : (Array.from(value.reviews as Set<any>).map(ReviewDtoToJSON)),
        'owners': value.owners === undefined ? undefined : ((value.owners as Array<any>).map(OwnerDtoToJSON)),
        'public': value._public,
        'bookmarked': value.bookmarked,
    };
}

