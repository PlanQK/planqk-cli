/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform API
 * Part of the OpenAPI specification for the PlanQK Platform.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@anaqor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists} from '../runtime'
import type {PricingPlanDto} from './PricingPlanDto'
import {PricingPlanDtoFromJSON, PricingPlanDtoToJSON} from './PricingPlanDto'
import type {RuntimeConfiguration} from './RuntimeConfiguration'
import {RuntimeConfigurationFromJSON, RuntimeConfigurationToJSON} from './RuntimeConfiguration'
import type {ServiceDefinitionDtoSource} from './ServiceDefinitionDtoSource'
import {ServiceDefinitionDtoSourceFromJSON, ServiceDefinitionDtoSourceToJSON} from './ServiceDefinitionDtoSource'
import type {TaxonomyElement} from './TaxonomyElement'
import {TaxonomyElementFromJSON, TaxonomyElementToJSON} from './TaxonomyElement'
import type {UpdateResourceConfigurationRequest} from './UpdateResourceConfigurationRequest'
import {
  UpdateResourceConfigurationRequestFromJSON,
  UpdateResourceConfigurationRequestToJSON,
} from './UpdateResourceConfigurationRequest'

/**
 *
 * @export
 * @interface ServiceDefinitionDto
 */
export interface ServiceDefinitionDto {
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    context?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    productionEndpoint?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    gatewayEndpoint?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    type?: ServiceDefinitionDtoTypeEnum;
    /**
     *
     * @type {Array<PricingPlanDto>}
     * @memberof ServiceDefinitionDto
     */
    pricingPlans?: Array<PricingPlanDto>;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    lifecycle?: ServiceDefinitionDtoLifecycleEnum;
    /**
     *
     * @type {Set<TaxonomyElement>}
     * @memberof ServiceDefinitionDto
     */
    industries?: Set<TaxonomyElement>;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    logoUrl?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    modifiedAt?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    modifiedBy?: string;
    /**
     *
     * @type {Set<UpdateResourceConfigurationRequest>}
     * @memberof ServiceDefinitionDto
     */
    configurations?: Set<UpdateResourceConfigurationRequest>;
    /**
     *
     * @type {RuntimeConfiguration}
     * @memberof ServiceDefinitionDto
     */
    runtimeConfiguration?: RuntimeConfiguration;
    /**
     *
     * @type {ServiceDefinitionDtoSource}
     * @memberof ServiceDefinitionDto
     */
    source?: ServiceDefinitionDtoSource;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    processDefinitionId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDefinitionDto
     */
    workflowModel?: string;
}


/**
 * @export
 */
export const ServiceDefinitionDtoTypeEnum = {
    Managed: 'MANAGED',
    External: 'EXTERNAL',
    Workflow: 'WORKFLOW'
} as const;
export type ServiceDefinitionDtoTypeEnum = typeof ServiceDefinitionDtoTypeEnum[keyof typeof ServiceDefinitionDtoTypeEnum];

/**
 * @export
 */
export const ServiceDefinitionDtoLifecycleEnum = {
    Created: 'CREATED',
    Accessible: 'ACCESSIBLE',
    Published: 'PUBLISHED'
} as const;
export type ServiceDefinitionDtoLifecycleEnum = typeof ServiceDefinitionDtoLifecycleEnum[keyof typeof ServiceDefinitionDtoLifecycleEnum];


/**
 * Check if a given object implements the ServiceDefinitionDto interface.
 */
export function instanceOfServiceDefinitionDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ServiceDefinitionDtoFromJSON(json: any): ServiceDefinitionDto {
    return ServiceDefinitionDtoFromJSONTyped(json, false);
}

export function ServiceDefinitionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceDefinitionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'id': !exists(json, 'id') ? undefined : json['id'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'context': !exists(json, 'context') ? undefined : json['context'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'productionEndpoint': !exists(json, 'productionEndpoint') ? undefined : json['productionEndpoint'],
        'gatewayEndpoint': !exists(json, 'gatewayEndpoint') ? undefined : json['gatewayEndpoint'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'pricingPlans': !exists(json, 'pricingPlans') ? undefined : ((json['pricingPlans'] as Array<any>).map(PricingPlanDtoFromJSON)),
        'lifecycle': !exists(json, 'lifecycle') ? undefined : json['lifecycle'],
        'industries': !exists(json, 'industries') ? undefined : (new Set((json['industries'] as Array<any>).map(TaxonomyElementFromJSON))),
        'logoUrl': !exists(json, 'logoUrl') ? undefined : json['logoUrl'],
        'createdAt': !exists(json, 'createdAt') ? undefined : json['createdAt'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : json['modifiedAt'],
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'modifiedBy': !exists(json, 'modifiedBy') ? undefined : json['modifiedBy'],
        'configurations': !exists(json, 'configurations') ? undefined : (new Set((json['configurations'] as Array<any>).map(UpdateResourceConfigurationRequestFromJSON))),
        'runtimeConfiguration': !exists(json, 'runtimeConfiguration') ? undefined : RuntimeConfigurationFromJSON(json['runtimeConfiguration']),
        'source': !exists(json, 'source') ? undefined : ServiceDefinitionDtoSourceFromJSON(json['source']),
        'processDefinitionId': !exists(json, 'processDefinitionId') ? undefined : json['processDefinitionId'],
        'workflowModel': !exists(json, 'workflowModel') ? undefined : json['workflowModel'],
    };
}

export function ServiceDefinitionDtoToJSON(value?: ServiceDefinitionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'version': value.version,
        'name': value.name,
        'context': value.context,
        'description': value.description,
        'productionEndpoint': value.productionEndpoint,
        'gatewayEndpoint': value.gatewayEndpoint,
        'type': value.type,
        'pricingPlans': value.pricingPlans === undefined ? undefined : ((value.pricingPlans as Array<any>).map(PricingPlanDtoToJSON)),
        'lifecycle': value.lifecycle,
        'industries': value.industries === undefined ? undefined : (Array.from(value.industries as Set<any>).map(TaxonomyElementToJSON)),
        'logoUrl': value.logoUrl,
        'createdAt': value.createdAt,
        'modifiedAt': value.modifiedAt,
        'createdBy': value.createdBy,
        'modifiedBy': value.modifiedBy,
        'configurations': value.configurations === undefined ? undefined : (Array.from(value.configurations as Set<any>).map(UpdateResourceConfigurationRequestToJSON)),
        'runtimeConfiguration': RuntimeConfigurationToJSON(value.runtimeConfiguration),
        'source': ServiceDefinitionDtoSourceToJSON(value.source),
        'processDefinitionId': value.processDefinitionId,
        'workflowModel': value.workflowModel,
    };
}

