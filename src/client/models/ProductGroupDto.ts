/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform OpenAPI definition
 * OpenAPI definition for the Platform and Ecosystem for Quantum-assisted Artificial Intelligence Platform
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stoneone.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists} from '../runtime'
import type {AmountMajorDto} from './AmountMajorDto'
import {AmountMajorDtoFromJSON, AmountMajorDtoToJSON} from './AmountMajorDto'
import type {ProductAmountDto} from './ProductAmountDto'
import {ProductAmountDtoFromJSON, ProductAmountDtoToJSON} from './ProductAmountDto'

/**
 *
 * @export
 * @interface ProductGroupDto
 */
export interface ProductGroupDto {
  /**
   *
   * @type {string}
   * @memberof ProductGroupDto
   */
  name?: string;
  /**
   *
   * @type {AmountMajorDto}
   * @memberof ProductGroupDto
   */
  amountMajor?: AmountMajorDto;
  /**
   *
   * @type {Array<ProductAmountDto>}
   * @memberof ProductGroupDto
   */
  products?: Array<ProductAmountDto>;
}

/**
 * Check if a given object implements the ProductGroupDto interface.
 */
export function instanceOfProductGroupDto(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function ProductGroupDtoFromJSON(json: any): ProductGroupDto {
  return ProductGroupDtoFromJSONTyped(json, false)
}

export function ProductGroupDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductGroupDto {
  if ((json === undefined) || (json === null)) {
    return json
  }
  return {

    'name': !exists(json, 'name') ? undefined : json['name'],
    'amountMajor': !exists(json, 'amountMajor') ? undefined : AmountMajorDtoFromJSON(json['amountMajor']),
    'products': !exists(json, 'products') ? undefined : ((json['products'] as Array<any>).map(ProductAmountDtoFromJSON)),
  }
}

export function ProductGroupDtoToJSON(value?: ProductGroupDto | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {

    'name': value.name,
    'amountMajor': AmountMajorDtoToJSON(value.amountMajor),
    'products': value.products === undefined ? undefined : ((value.products as Array<any>).map(ProductAmountDtoToJSON)),
  }
}

