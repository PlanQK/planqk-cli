/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform OpenAPI definition
 * OpenAPI definition for the Platform and Ecosystem for Quantum-assisted Artificial Intelligence Platform
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stoneone.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists} from '../runtime'
import type {ServiceDefinitionDto} from './ServiceDefinitionDto'
import {ServiceDefinitionDtoFromJSON, ServiceDefinitionDtoToJSON} from './ServiceDefinitionDto'

/**
 *
 * @export
 * @interface ServiceDto
 */
export interface ServiceDto {
    /**
     * The access permission role for this entity of the current user
     * @type {string}
     * @memberof ServiceDto
     */
    readonly currentUserPermission?: ServiceDtoCurrentUserPermissionEnum;
    /**
     *
     * @type {string}
     * @memberof ServiceDto
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceDto
     */
    name?: string;
    /**
     *
     * @type {Array<ServiceDefinitionDto>}
     * @memberof ServiceDto
     */
    serviceDefinitions?: Array<ServiceDefinitionDto>;
}


/**
 * @export
 */
export const ServiceDtoCurrentUserPermissionEnum = {
    Viewer: 'VIEWER',
    Maintainer: 'MAINTAINER',
    Owner: 'OWNER'
} as const;
export type ServiceDtoCurrentUserPermissionEnum = typeof ServiceDtoCurrentUserPermissionEnum[keyof typeof ServiceDtoCurrentUserPermissionEnum];


/**
 * Check if a given object implements the ServiceDto interface.
 */
export function instanceOfServiceDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ServiceDtoFromJSON(json: any): ServiceDto {
    return ServiceDtoFromJSONTyped(json, false);
}

export function ServiceDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'currentUserPermission': !exists(json, 'currentUserPermission') ? undefined : json['currentUserPermission'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'serviceDefinitions': !exists(json, 'serviceDefinitions') ? undefined : ((json['serviceDefinitions'] as Array<any>).map(ServiceDefinitionDtoFromJSON)),
    };
}

export function ServiceDtoToJSON(value?: ServiceDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'name': value.name,
        'serviceDefinitions': value.serviceDefinitions === undefined ? undefined : ((value.serviceDefinitions as Array<any>).map(ServiceDefinitionDtoToJSON)),
    };
}

