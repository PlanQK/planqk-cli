/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform API
 * Part of the OpenAPI specification for the PlanQK Platform.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@anaqor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists} from '../runtime'
import type {FileDto} from './FileDto'
import {FileDtoFromJSON, FileDtoToJSON} from './FileDto'

/**
 *
 * @export
 * @interface DataSourceDescriptorDto
 */
export interface DataSourceDescriptorDto {
    /**
     * The access permission role for this entity of the current user
     * @type {string}
     * @memberof DataSourceDescriptorDto
     */
    readonly currentUserPermission?: DataSourceDescriptorDtoCurrentUserPermissionEnum;
    /**
     *
     * @type {string}
     * @memberof DataSourceDescriptorDto
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DataSourceDescriptorDto
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof DataSourceDescriptorDto
     */
    description?: string;
    /**
     *
     * @type {Set<FileDto>}
     * @memberof DataSourceDescriptorDto
     */
    files?: Set<FileDto>;
    /**
     *
     * @type {string}
     * @memberof DataSourceDescriptorDto
     */
    createdBy?: string;
    /**
     *
     * @type {Date}
     * @memberof DataSourceDescriptorDto
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof DataSourceDescriptorDto
     */
    modifiedBy?: string;
    /**
     *
     * @type {Date}
     * @memberof DataSourceDescriptorDto
     */
    modifiedAt?: Date;
}


/**
 * @export
 */
export const DataSourceDescriptorDtoCurrentUserPermissionEnum = {
    Viewer: 'VIEWER',
    Maintainer: 'MAINTAINER',
    Owner: 'OWNER'
} as const;
export type DataSourceDescriptorDtoCurrentUserPermissionEnum = typeof DataSourceDescriptorDtoCurrentUserPermissionEnum[keyof typeof DataSourceDescriptorDtoCurrentUserPermissionEnum];


/**
 * Check if a given object implements the DataSourceDescriptorDto interface.
 */
export function instanceOfDataSourceDescriptorDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DataSourceDescriptorDtoFromJSON(json: any): DataSourceDescriptorDto {
    return DataSourceDescriptorDtoFromJSONTyped(json, false);
}

export function DataSourceDescriptorDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataSourceDescriptorDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'currentUserPermission': !exists(json, 'currentUserPermission') ? undefined : json['currentUserPermission'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'files': !exists(json, 'files') ? undefined : (new Set((json['files'] as Array<any>).map(FileDtoFromJSON))),
        'createdBy': !exists(json, 'createdBy') ? undefined : json['createdBy'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'modifiedBy': !exists(json, 'modifiedBy') ? undefined : json['modifiedBy'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function DataSourceDescriptorDtoToJSON(value?: DataSourceDescriptorDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'name': value.name,
        'description': value.description,
        'files': value.files === undefined ? undefined : (Array.from(value.files as Set<any>).map(FileDtoToJSON)),
        'createdBy': value.createdBy,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'modifiedBy': value.modifiedBy,
        'modifiedAt': value.modifiedAt === undefined ? undefined : (value.modifiedAt.toISOString()),
    };
}

