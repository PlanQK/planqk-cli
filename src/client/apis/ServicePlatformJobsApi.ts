/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform OpenAPI definition
 * OpenAPI definition for the Platform and Ecosystem for Quantum-assisted Artificial Intelligence Platform
 *
 * The version of the OpenAPI document: v1
 * Contact: info@stoneone.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {CreateJobRequest, JobDto, JobOverviewDto, ProductUsageDto} from '../models'
import {CreateJobRequestToJSON, JobDtoFromJSON, JobOverviewDtoFromJSON, ProductUsageDtoFromJSON} from '../models'

export interface CancelJobRequest {
  id: string;
  xOrganizationId?: string;
}

export interface CreateJobOperationRequest {
  createJobRequest: CreateJobRequest;
  xOrganizationId?: string;
}

export interface DeleteJobRequest {
  id: string;
  xOrganizationId?: string;
}

export interface GetJobRequest {
  id: string;
  xOrganizationId?: string;
}

export interface GetJobCostsRequest {
  id: string;
  xOrganizationId?: string;
}

export interface GetJobLogsRequest {
  id: string;
  xOrganizationId?: string;
}

export interface GetJobsRequest {
  xOrganizationId?: string;
}

/**
 *
 */
export class ServicePlatformJobsApi extends runtime.BaseAPI {

  /**
   * Cancels a given job.
   */
  async cancelJobRaw(requestParameters: CancelJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling cancelJob.')
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
      headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Auth-Token'] = this.configuration.apiKey('X-Auth-Token') // apiKey authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('oauth2', [])
    }

    const response = await this.request({
      path: `/jobs/{id}/cancel`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => JobDtoFromJSON(jsonValue))
  }

  /**
   * Cancels a given job.
   */
  async cancelJob(requestParameters: CancelJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobDto> {
    const response = await this.cancelJobRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Creates a new job execution for one of your services.
   */
  async createJobRaw(requestParameters: CreateJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobDto>> {
    if (requestParameters.createJobRequest === null || requestParameters.createJobRequest === undefined) {
      throw new runtime.RequiredError('createJobRequest', 'Required parameter requestParameters.createJobRequest was null or undefined when calling createJob.')
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
      headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Auth-Token'] = this.configuration.apiKey('X-Auth-Token') // apiKey authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('oauth2', [])
    }

    const response = await this.request({
      path: `/jobs`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateJobRequestToJSON(requestParameters.createJobRequest),
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => JobDtoFromJSON(jsonValue))
  }

  /**
   * Creates a new job execution for one of your services.
   */
  async createJob(requestParameters: CreateJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobDto> {
    const response = await this.createJobRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Deletes a given job.
   */
  async deleteJobRaw(requestParameters: DeleteJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteJob.')
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
      headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Auth-Token'] = this.configuration.apiKey('X-Auth-Token') // apiKey authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('oauth2', [])
    }

    const response = await this.request({
      path: `/jobs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides)

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Deletes a given job.
   */
  async deleteJob(requestParameters: DeleteJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.deleteJobRaw(requestParameters, initOverrides)
  }

  /**
   * Retrieves a given job.
   */
  async getJobRaw(requestParameters: GetJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getJob.')
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
      headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Auth-Token'] = this.configuration.apiKey('X-Auth-Token') // apiKey authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('oauth2', [])
    }

    const response = await this.request({
      path: `/jobs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => JobDtoFromJSON(jsonValue))
  }

  /**
   * Retrieves a given job.
   */
  async getJob(requestParameters: GetJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobDto> {
    const response = await this.getJobRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieves estimated costs for a finished job.
   */
  async getJobCostsRaw(requestParameters: GetJobCostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductUsageDto>>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getJobCosts.')
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
      headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Auth-Token'] = this.configuration.apiKey('X-Auth-Token') // apiKey authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('oauth2', [])
    }

    const response = await this.request({
      path: `/jobs/{id}/costs`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductUsageDtoFromJSON))
  }

  /**
   * Retrieves estimated costs for a finished job.
   */
  async getJobCosts(requestParameters: GetJobCostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductUsageDto>> {
    const response = await this.getJobCostsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieves logs of a given job.
   */
  async getJobLogsRaw(requestParameters: GetJobLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getJobLogs.')
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
      headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Auth-Token'] = this.configuration.apiKey('X-Auth-Token') // apiKey authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('oauth2', [])
    }

    const response = await this.request({
      path: `/jobs/{id}/logs`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides)

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response)
    } else {
      return new runtime.TextApiResponse(response) as any
    }
  }

  /**
   * Retrieves logs of a given job.
   */
  async getJobLogs(requestParameters: GetJobLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
    const response = await this.getJobLogsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Retrieves a list of executed jobs.
   */
  async getJobsRaw(requestParameters: GetJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobOverviewDto>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
      headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId)
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Auth-Token'] = this.configuration.apiKey('X-Auth-Token') // apiKey authentication
    }

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters['Authorization'] = await this.configuration.accessToken('oauth2', [])
    }

    const response = await this.request({
      path: `/jobs`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobOverviewDtoFromJSON))
  }

  /**
   * Retrieves a list of executed jobs.
   */
  async getJobs(requestParameters: GetJobsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobOverviewDto>> {
    const response = await this.getJobsRaw(requestParameters, initOverrides)
    return await response.value()
  }

}
