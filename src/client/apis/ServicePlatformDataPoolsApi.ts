/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform API
 * Part of the OpenAPI specification for the PlanQK Platform.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@anaqor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  CreateDataPoolRequest,
  DataPoolDto,
  DataSourceDescriptorDto,
  PageDataPoolDto,
  UpdateDataPoolRequest,
} from '../models/index'
import {
  CreateDataPoolRequestToJSON,
  DataPoolDtoFromJSON,
  DataSourceDescriptorDtoFromJSON,
  PageDataPoolDtoFromJSON,
  UpdateDataPoolRequestToJSON,
} from '../models/index'

export interface CreateDataPoolOperationRequest {
    createDataPoolRequest: CreateDataPoolRequest;
    xOrganizationId?: string;
}

export interface CreateFileDataSourceRequest {
    dataPoolId: string;
    file: Blob;
    xOrganizationId?: string;
}

export interface DeleteDataPoolRequest {
    id: string;
    xOrganizationId?: string;
}

export interface DeleteDataSourceRequest {
    dataPoolId: string;
    dataSourceId: string;
    xOrganizationId?: string;
}

export interface GetDataPoolRequest {
    id: string;
    xOrganizationId?: string;
}

export interface GetDataPoolsRequest {
    xOrganizationId?: string;
    search?: string;
    page?: number;
    size?: number;
    sort?: Array<string>;
}

export interface GetDataSourcesRequest {
    dataPoolId: string;
    xOrganizationId?: string;
}

export interface GetFileContentRequest {
    dataPoolId: string;
    dataSourceId: string;
    xOrganizationId?: string;
}

export interface UpdateDataPoolOperationRequest {
    id: string;
    updateDataPoolRequest: UpdateDataPoolRequest;
    xOrganizationId?: string;
}

/**
 *
 */
export class ServicePlatformDataPoolsApi extends runtime.BaseAPI {

    /**
     * Creates a new data pool. The user will be the owner of the data pool.
     */
    async createDataPoolRaw(requestParameters: CreateDataPoolOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataPoolDto>> {
        if (requestParameters.createDataPoolRequest === null || requestParameters.createDataPoolRequest === undefined) {
            throw new runtime.RequiredError('createDataPoolRequest','Required parameter requestParameters.createDataPoolRequest was null or undefined when calling createDataPool.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/data-pools`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDataPoolRequestToJSON(requestParameters.createDataPoolRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataPoolDtoFromJSON(jsonValue));
    }

    /**
     * Creates a new data pool. The user will be the owner of the data pool.
     */
    async createDataPool(requestParameters: CreateDataPoolOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataPoolDto> {
        const response = await this.createDataPoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads a file to a data pool. It creates a data source containing one file. The user must have the permission to modify the data pool.
     */
    async createFileDataSourceRaw(requestParameters: CreateFileDataSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataSourceDescriptorDto>> {
        if (requestParameters.dataPoolId === null || requestParameters.dataPoolId === undefined) {
            throw new runtime.RequiredError('dataPoolId','Required parameter requestParameters.dataPoolId was null or undefined when calling createFileDataSource.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling createFileDataSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/data-pools/{dataPoolId}/files`.replace(`{${"dataPoolId"}}`, encodeURIComponent(String(requestParameters.dataPoolId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataSourceDescriptorDtoFromJSON(jsonValue));
    }

    /**
     * Uploads a file to a data pool. It creates a data source containing one file. The user must have the permission to modify the data pool.
     */
    async createFileDataSource(requestParameters: CreateFileDataSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataSourceDescriptorDto> {
        const response = await this.createFileDataSourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a data pool by its id. The user must have access to the data pool.
     */
    async deleteDataPoolRaw(requestParameters: DeleteDataPoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDataPool.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/data-pools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a data pool by its id. The user must have access to the data pool.
     */
    async deleteDataPool(requestParameters: DeleteDataPoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDataPoolRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a data source. The user must have the permission to delete the data source.
     */
    async deleteDataSourceRaw(requestParameters: DeleteDataSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dataPoolId === null || requestParameters.dataPoolId === undefined) {
            throw new runtime.RequiredError('dataPoolId','Required parameter requestParameters.dataPoolId was null or undefined when calling deleteDataSource.');
        }

        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling deleteDataSource.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/data-pools/{dataPoolId}/data-sources/{dataSourceId}`.replace(`{${"dataPoolId"}}`, encodeURIComponent(String(requestParameters.dataPoolId))).replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a data source. The user must have the permission to delete the data source.
     */
    async deleteDataSource(requestParameters: DeleteDataSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDataSourceRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a data pool by its id. The user must have access to the data pool.
     */
    async getDataPoolRaw(requestParameters: GetDataPoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataPoolDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDataPool.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/data-pools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataPoolDtoFromJSON(jsonValue));
    }

    /**
     * Gets a data pool by its id. The user must have access to the data pool.
     */
    async getDataPool(requestParameters: GetDataPoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataPoolDto> {
        const response = await this.getDataPoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of all data pools the user has access to. The result is paginated according to the given parameters.
     */
    async getDataPoolsRaw(requestParameters: GetDataPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageDataPoolDto>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/data-pools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageDataPoolDtoFromJSON(jsonValue));
    }

    /**
     * Gets a list of all data pools the user has access to. The result is paginated according to the given parameters.
     */
    async getDataPools(requestParameters: GetDataPoolsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageDataPoolDto> {
        const response = await this.getDataPoolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all data sources of an existing data pool. The user must have the permission to view the data pool.
     */
    async getDataSourcesRaw(requestParameters: GetDataSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataSourceDescriptorDto>>> {
        if (requestParameters.dataPoolId === null || requestParameters.dataPoolId === undefined) {
            throw new runtime.RequiredError('dataPoolId','Required parameter requestParameters.dataPoolId was null or undefined when calling getDataSources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/data-pools/{dataPoolId}/data-sources`.replace(`{${"dataPoolId"}}`, encodeURIComponent(String(requestParameters.dataPoolId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataSourceDescriptorDtoFromJSON));
    }

    /**
     * Retrieves all data sources of an existing data pool. The user must have the permission to view the data pool.
     */
    async getDataSources(requestParameters: GetDataSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataSourceDescriptorDto>> {
        const response = await this.getDataSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the file of a data source. The user must have the permission to view the data pool.
     */
    async getFileContentRaw(requestParameters: GetFileContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.dataPoolId === null || requestParameters.dataPoolId === undefined) {
            throw new runtime.RequiredError('dataPoolId','Required parameter requestParameters.dataPoolId was null or undefined when calling getFileContent.');
        }

        if (requestParameters.dataSourceId === null || requestParameters.dataSourceId === undefined) {
            throw new runtime.RequiredError('dataSourceId','Required parameter requestParameters.dataSourceId was null or undefined when calling getFileContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/data-pools/{dataPoolId}/data-sources/{dataSourceId}/file`.replace(`{${"dataPoolId"}}`, encodeURIComponent(String(requestParameters.dataPoolId))).replace(`{${"dataSourceId"}}`, encodeURIComponent(String(requestParameters.dataSourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Returns the file of a data source. The user must have the permission to view the data pool.
     */
    async getFileContent(requestParameters: GetFileContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getFileContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing data pool. The user must have access to the data pool.
     */
    async updateDataPoolRaw(requestParameters: UpdateDataPoolOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataPoolDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDataPool.');
        }

        if (requestParameters.updateDataPoolRequest === null || requestParameters.updateDataPoolRequest === undefined) {
            throw new runtime.RequiredError('updateDataPoolRequest','Required parameter requestParameters.updateDataPoolRequest was null or undefined when calling updateDataPool.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xOrganizationId !== undefined && requestParameters.xOrganizationId !== null) {
            headerParameters['X-OrganizationId'] = String(requestParameters.xOrganizationId);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/data-pools/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDataPoolRequestToJSON(requestParameters.updateDataPoolRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataPoolDtoFromJSON(jsonValue));
    }

    /**
     * Updates an existing data pool. The user must have access to the data pool.
     */
    async updateDataPool(requestParameters: UpdateDataPoolOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataPoolDto> {
        const response = await this.updateDataPoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
