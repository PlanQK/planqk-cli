/* tslint:disable */
/* eslint-disable */
/**
 * PlanQK Platform API
 * Part of the OpenAPI specification for the PlanQK Platform.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@anaqor.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDto,
  ApiOverviewDto,
} from '../models/index';
import {
    ApiDtoFromJSON,
    ApiDtoToJSON,
    ApiOverviewDtoFromJSON,
    ApiOverviewDtoToJSON,
} from '../models/index';

export interface FindServiceRequest {
    id: string;
}

export interface GetLogoRequest {
    id: string;
}

/**
 * 
 */
export class ServicePlatformMarketplaceApi extends runtime.BaseAPI {

    /**
     * Gets a specific publicly published service and its basic properties.
     */
    async findServiceRaw(requestParameters: FindServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/v2/apis/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiDtoFromJSON(jsonValue));
    }

    /**
     * Gets a specific publicly published service and its basic properties.
     */
    async findService(requestParameters: FindServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDto> {
        const response = await this.findServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a list of all publicly published service on the PlanQK platform.
     */
    async findServicesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApiOverviewDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/v2/apis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiOverviewDtoFromJSON));
    }

    /**
     * Gets a list of all publicly published service on the PlanQK platform.
     */
    async findServices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApiOverviewDto>> {
        const response = await this.findServicesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the logo of an API.
     */
    async getLogoRaw(requestParameters: GetLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLogo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = await this.configuration.apiKey("X-Auth-Token"); // apiKey authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/v2/apis/{id}/logo`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieves the logo of an API.
     */
    async getLogo(requestParameters: GetLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getLogoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
